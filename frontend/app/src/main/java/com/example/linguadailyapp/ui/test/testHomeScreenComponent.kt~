package com.example.linguadailyapp.ui.screens

import TwoCardsInRow
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.linguadailyapp.ui.components.*
import com.example.linguadailyapp.ui.theme.LinguaDailyAppTheme
import com.example.linguadailyapp.viewmodel.WordViewModel
import com.example.linguadailyapp.viewmodel.WordViewModelFactory
import kotlinx.coroutines.delay

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navController: NavController,
    viewModel: WordViewModel = viewModel(factory = WordViewModelFactory(LocalContext.current))
) {
    val todaysWord by viewModel.todaysWord.collectAsState()
    var currentLanguage by remember { mutableStateOf(Languagetype("English", "en")) }

    // Animation states
    var isHeaderVisible by remember { mutableStateOf(false) }
    var isStatsVisible by remember { mutableStateOf(false) }
    var isCardsVisible by remember { mutableStateOf(false) }
    var isChallengeVisible by remember { mutableStateOf(false) }
    var isWordCardVisible by remember { mutableStateOf(false) }

    // Staggered animation
    LaunchedEffect(Unit) {
        delay(100)
        isHeaderVisible = true
        delay(200)
        isStatsVisible = true
        delay(200)
        isCardsVisible = true
        delay(200)
        isChallengeVisible = true
        delay(200)
        isWordCardVisible = true
    }

    // Background gradients
    val primaryBackground = Brush.linearGradient(
        colors = listOf(
            Color(0xFFF7F5F0),  // Light cream color
            Color(0xFFF1E4D2),  // Slightly darker cream
        ),
        start = Offset(0f, 0f),
        end = Offset(0f, Float.POSITIVE_INFINITY)
    )

    Scaffold(
        topBar = {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .shadow(elevation = 4.dp)
                    .padding(vertical = 8.dp)
            ) {
                StyledTopBar(
                    navController = navController,
                    onLanguageSelected = { language ->
                        currentLanguage = language
                    }
                )
            }
        },
        content = { paddingValues ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(primaryBackground)
            ) {
                // Main content column with scroll
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues)
                        .verticalScroll(rememberScrollState()),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Spacer(modifier = Modifier.height(16.dp))

                    // Welcome header
                    AnimatedVisibility(
                        visible = isHeaderVisible,
                        enter = fadeIn(animationSpec = tween(500)) +
                                slideInVertically(
                                    initialOffsetY = { -it },
                                    animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)
                                )
                    ) {
                        DailyInspirationBanner()
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Stats widget
                    AnimatedVisibility(
                        visible = isStatsVisible,
                        enter = fadeIn(animationSpec = tween(500)) +
                                slideInVertically(
                                    initialOffsetY = { it / 2 },
                                    animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)
                                )
                    ) {
                        VocabularyStatsWidget()
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Animated cards row
                    AnimatedVisibility(
                        visible = isCardsVisible,
                        enter = fadeIn(animationSpec = tween(500)) +
                                slideInVertically(
                                    initialOffsetY = { it / 2 },
                                    animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)
                                )
                    ) {
                        TwoCardsInRow()
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Daily challenge
                    AnimatedVisibility(
                        visible = isChallengeVisible,
                        enter = fadeIn(animationSpec = tween(500)) +
                                slideInVertically(
                                    initialOffsetY = { it / 2 },
                                    animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)
                                )
                    ) {
                        DailyChallengeCard()
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // Animated main word card
                    AnimatedVisibility(
                        visible = isWordCardVisible,
                        enter = fadeIn(animationSpec = tween(700)) +
                                slideInVertically(
                                    initialOffsetY = { it / 3 },
                                    animationSpec = tween(durationMillis = 700, easing = FastOutSlowInEasing)
                                )
                    ) {
                        MainWordCard(navController = navController)
                    }

                    Spacer(modifier = Modifier.height(24.dp))
                }
            }
        }
    )
}

@Preview(showBackground = true)
@Preview(name = "Small phone", device = "spec:width=311dp,height=491dp")
@Composable
fun HomeScreenPreview() {
    val navController = rememberNavController()
    LinguaDailyAppTheme {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(750.dp)
        ) {
            HomeScreen(navController = navController)
        }
    }
}