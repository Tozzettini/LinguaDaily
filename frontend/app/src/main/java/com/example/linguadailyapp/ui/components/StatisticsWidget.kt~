package com.example.linguadailyapp.ui.components

import android.app.Application
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.linguadailyapp.ui.theme.LinguaDailyAppTheme
import com.example.linguadailyapp.viewmodel.VocabularyStatsViewModel
import kotlinx.coroutines.delay

@Composable
fun VocabularyStatsWidget(
    viewModel: VocabularyStatsViewModel = viewModel()
) {
    // Collect state from ViewModel
    val stats by viewModel.stats.collectAsState()

    // Animation state
    var animate by remember { mutableStateOf(false) }
    val progress = stats.wordsLearned.toFloat() / stats.totalGoal.toFloat()
    val animatedProgress by animateFloatAsState(
        targetValue = if (animate) progress else 0f,
        animationSpec = tween(durationMillis = 1500)
    )

    LaunchedEffect(key1 = true) {
        delay(300)
        animate = true
    }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 24.dp)
            .height(130.dp)
            .shadow(elevation = 2.dp, shape = RoundedCornerShape(16.dp)),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Progress Circle
            Box(
                modifier = Modifier
                    .size(80.dp),
                contentAlignment = Alignment.Center
            ) {
                Canvas(modifier = Modifier.size(80.dp)) {
                    // Background circle
                    drawArc(
                        color = Color(0xFFEEEEEE),
                        startAngle = 0f,
                        sweepAngle = 360f,
                        useCenter = false,
                        style = Stroke(width = 10f, cap = StrokeCap.Round)
                    )

                    // Progress arc
                    drawArc(
                        color = Color(0xFF1F565E),
                        startAngle = -90f,
                        sweepAngle = 360f * animatedProgress,
                        useCenter = false,
                        style = Stroke(width = 10f, cap = StrokeCap.Round)
                    )
                }

                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text(
                        text = "${stats.wordsLearned}",
                        fontWeight = FontWeight.Bold,
                        fontSize = 18.sp,
                        color = Color(0xFF1F565E)
                    )
                    Text(
                        text = "words",
                        fontSize = 12.sp,
                        color = Color.Gray
                    )
                }
            }

            Spacer(modifier = Modifier.width(16.dp))

            // Stats details
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = "Your Progress",
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp,
                    color = Color(0xFF1F565E)
                )

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    StatItem(title = "Goal", value = "${stats.totalGoal} words")
                    if (stats.streakDays == 1) {
                        StatItem(title = "Streak", value = "${stats.streakDays} day")

                    } else {
                    StatItem(title = "Streak", value = "${stats.streakDays} days")

                    }

                }

                Spacer(modifier = Modifier.height(8.dp))

                // Progress indicator
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(6.dp)
                        .background(Color(0xFFEEEEEE), RoundedCornerShape(3.dp))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth(animatedProgress)
                            .height(6.dp)
                            .background(Color(0xFF1F565E), RoundedCornerShape(3.dp))
                    )
                }
            }
        }
    }
}

@Composable
fun StatItem(title: String, value: String) {
    Column {
        Text(
            text = title,
            fontSize = 12.sp,
            color = Color.Gray
        )
        Text(
            text = value,
            fontWeight = FontWeight.Medium,
            fontSize = 14.sp,
            color = Color.Black
        )
    }
}

@Preview(showBackground = true)
@Composable
fun VocabularyStatsWidgetPreview() {
    LinguaDailyAppTheme {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            // Using hardcoded values for preview
            val previewViewModel = PreviewVocabularyStatsViewModel()
            VocabularyStatsWidget(viewModel = previewViewModel)
        }
    }
}

/**
 * Preview-only ViewModel implementation
 */
class PreviewVocabularyStatsViewModel : VocabularyStatsViewModel(Application()) {
    init {
        updateWordsLearned(125)
        updateTotalGoal(365)
    }
}