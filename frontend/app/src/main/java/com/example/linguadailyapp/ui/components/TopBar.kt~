@file:Suppress("UNREACHABLE_CODE")

package com.example.linguadailyapp.ui.components

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.outlined.Help
import androidx.compose.material.icons.automirrored.outlined.OpenInNew
import androidx.compose.material.icons.automirrored.outlined.Send
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.BookmarkAdd
import androidx.compose.material.icons.filled.Language
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.Place
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.outlined.Feedback
import androidx.compose.material.icons.outlined.Info
import androidx.compose.material.icons.outlined.Person
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.linguadailyapp.R
import com.example.linguadailyapp.navigation.NavigationDestinations
import com.example.linguadailyapp.ui.theme.LinguaDailyAppTheme

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TopBar(
    onLanguageIconClick: () -> Unit = {},
    onSettingsIconClick: () -> Unit = {}
) {
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(rememberTopAppBarState())
    var language by rememberSaveable  { mutableStateOf("EN") }
    var expanded by remember { mutableStateOf(false) }


    CenterAlignedTopAppBar(
        colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer,
            titleContentColor = MaterialTheme.colorScheme.primary,
        ),
        title = {
            Image(
                painter = painterResource(id = R.drawable.logo_no_bg), // your logo image
                contentDescription = null, // provide a description if needed
                modifier = Modifier
                    .padding(vertical = 0.dp) // Optional padding
                    .graphicsLayer(translationY = 20f)
                    .graphicsLayer(scaleX = 3.0f, scaleY = 3.0f)
            )

        },
        navigationIcon = {

            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Start, // No space between elements
                modifier = Modifier.padding(0.dp).clip(RoundedCornerShape(16.dp)).clickable(onClick = {


                }),
            ) {
                // Language Icon

                IconButton(
                    onClick = { /* Add functionality */ },
                    modifier = Modifier
                        .background(
                            color = MaterialTheme.colorScheme.secondary,
                            shape = CircleShape,

                        )
                        .size(32.dp)
                        .padding(horizontal = 0.dp)
                        .border( BorderStroke(1.dp, MaterialTheme.colorScheme.onBackground))
                ) {
                    Icon(
                        imageVector = Icons.Default.Language,
                        contentDescription = "Add",
                        tint = Color.Black,
//                        modifier = Modifier.size(18.dp)
                    )
                }



                // "EN" text
//                Row  ( verticalAlignment = Alignment.CenterVertically,
//                    modifier = Modifier.offset(x = (-8).dp)
//
//                ) {
//                    Text(
//                        text = language,
//                        style = MaterialTheme.typography.bodyLarge.copy(
//                            color = Color.Black
//                        ),
//                        fontWeight = FontWeight.Bold,
//                    )
//
//                    // Downward Arrow Icon for dropdown
//
//                        Icon(
//                            imageVector = Icons.Filled.ArrowDropDown,
//                            contentDescription = "Dropdown"
//                        )
//
//                }
            }
//
        },
        actions = {
            IconButton(onClick = onSettingsIconClick) {
                Icon(
                    imageVector = Icons.Filled.Settings,
                    contentDescription = "Settings"
                )
            }
        },
        scrollBehavior = scrollBehavior,
    )
}

@Preview(showBackground = true)
@Composable
fun TopBarPreview() {
    LinguaDailyAppTheme {
        TopBar(
            onLanguageIconClick = {
                // Handle back navigation in the preview
            },
            onSettingsIconClick = {
                // Handle menu icon click in the preview
            }
        )
    }
}

@Composable
fun StyledTopBar(navController: NavController) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp)
            .height(56.dp)
            .clip(RoundedCornerShape(15.dp))
            .border(2.dp, MaterialTheme.colorScheme.onBackground, RoundedCornerShape(15.dp))
            .background(MaterialTheme.colorScheme.primaryContainer),

        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Box (modifier = Modifier.padding(horizontal = 10.dp)) {
            IconButton(
                onClick = { /* Add functionality */ navController.navigate(
                    NavigationDestinations.Se.route) },
                modifier = Modifier
                    .size(38.dp)
                    .border(
                        width = 2.dp,
                        color = MaterialTheme.colorScheme.onBackground,
                        shape = CircleShape // ðŸ‘ˆ this is essential!
                    )                .background(
    //                    color = MaterialTheme.colorScheme.secondaryContainer,
                        color = Color(0xFFFCEFD5),
                        shape = CircleShape,

                        )
                    .padding(horizontal = 0.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Language,
                    contentDescription = "Add",
                    tint = Color.Black,
    //                        modifier = Modifier.size(18.dp)
                )
            }
        }

        Image(
            painter = painterResource(id = R.drawable.logo_no_bg), // your logo image
            contentDescription = null, // provide a description if needed
            modifier = Modifier
                .padding(vertical = 0.dp) // Optional padding
                .graphicsLayer(translationY = 20f)
                .graphicsLayer(scaleX = 3.0f, scaleY = 3.0f)
        )

        Box (modifier = Modifier.padding(horizontal = 10.dp)) {
            IconButton(
                onClick = {  navController.navigate(
                    NavigationDestinations.Settings.route) },
                modifier = Modifier
                    .size(38.dp)
                    .border(
                        width = 2.dp,
                        color = MaterialTheme.colorScheme.onBackground,
                        shape = CircleShape // ðŸ‘ˆ this is essential!
                    )                .background(
                        color = MaterialTheme.colorScheme.secondaryContainer,
                        shape = CircleShape,

                        )
                    .padding(horizontal = 0.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Settings,
                    contentDescription = "Add",
                    tint = Color.Black,
    //                        modifier = Modifier.size(18.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun StyledTopBarPreview() {
    LinguaDailyAppTheme {
        val navController = rememberNavController()

        StyledTopBar(navController = navController)
    }
}