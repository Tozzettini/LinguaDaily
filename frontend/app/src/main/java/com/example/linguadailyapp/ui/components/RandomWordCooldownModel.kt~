package com.example.linguadailyapp.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Timelapse
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.time.Duration
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter


@Preview(showBackground = true, widthDp = 640, heightDp = 900)
@Composable
fun RandomWordCooldownModalPreview() {
    RandomWordCooldownModal(
        isVisible = true,
        remainingTime = Duration.ofMinutes(1),
        onWatchAdClick = {},
        onDismiss = {}
    )
}



@Composable
fun RandomWordCooldownModal(
    isVisible: Boolean,
    remainingTime: Duration? = null,
    onWatchAdClick: () -> Unit,
    onDismiss: () -> Unit
) {
    val scope = rememberCoroutineScope()

    if (isVisible) {
        Dialog(
            onDismissRequest = onDismiss,
            properties = DialogProperties(
                dismissOnBackPress = true,
                dismissOnClickOutside = true,
                usePlatformDefaultWidth = false
            )
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black.copy(alpha = 0.5f))
                    .clickable(onClick = onDismiss),
                contentAlignment = Alignment.Center
            ) {
                Card(
                    modifier = Modifier
                        .padding(24.dp)
                        .widthIn(max = 300.dp)
                        .clickable { /* Consume click to prevent dismiss */ }
                        .clip(RoundedCornerShape(16.dp)),
                    colors = CardDefaults.cardColors(containerColor = Color.White),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .padding(24.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        // Icon at the top
                        Box(
                            modifier = Modifier
                                .size(64.dp)
                                .background(Color(0xFF1F565E).copy(alpha = 0.1f), CircleShape),
                            contentAlignment = Alignment.Center
                        ) {
                            Icon(
                                imageVector = Icons.Default.Timelapse,
                                contentDescription = "Cooldown",
                                tint = Color(0xFF1F565E),
                                modifier = Modifier.size(36.dp)
                            )
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        Text(
                            text = "Random Word Limit Reached",
                            fontWeight = FontWeight.Bold,
                            fontSize = 18.sp,
                            color = Color(0xFF1F565E),
                            textAlign = TextAlign.Center
                        )

                        Spacer(modifier = Modifier.height(12.dp))

                        Text(
                            text = "You've reached your daily limit for random words. If you want to restore the cooldown, please click this button and watch a 30-second ad.",
                            fontSize = 14.sp,
                            color = Color.Gray,
                            lineHeight = 20.sp,
                            textAlign = TextAlign.Center
                        )

                        Spacer(modifier = Modifier.height(24.dp))

                        if (remainingTime != null) {
                            // Format the remaining time
                            val hours = remainingTime.toHours()
                            val minutes = remainingTime.toMinutes() % 60
                            val seconds = remainingTime.seconds % 60

                            Text(
                                text = "Time remaining: ${String.format("%02d:%02d:%02d", hours, minutes, seconds)}",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Medium,
                                color = Color(0xFF1F565E)
                            )

                            Spacer(modifier = Modifier.height(24.dp))
                        }

                        // Watch Ad button
                        Button(
                            onClick = {
                                scope.launch {
                                    onWatchAdClick()
                                }
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(48.dp),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color(0xFF1F565E)
                            ),
                            shape = RoundedCornerShape(8.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.Center
                            ) {
                                Icon(
                                    imageVector = Icons.Default.PlayArrow,
                                    contentDescription = "Play",
                                    tint = Color.White
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = "Watch Ad",
                                    color = Color.White,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        // Dismiss button
                        Text(
                            text = "Not now",
                            modifier = Modifier
                                .clickable { onDismiss() }
                                .padding(8.dp),
                            color = Color.Gray,
                            fontSize = 14.sp
                        )
                    }
                }
            }
        }
    }
}