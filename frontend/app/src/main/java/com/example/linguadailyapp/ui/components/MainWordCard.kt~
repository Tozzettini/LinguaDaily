package com.example.linguadailyapp.ui.components

import TwoCardsInRow
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.IntrinsicSize
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Bookmark
import androidx.compose.material.icons.filled.BookmarkAdd
import androidx.compose.material.icons.filled.Bookmarks
import androidx.compose.material.icons.filled.Lightbulb
import androidx.compose.material.icons.filled.LocalFireDepartment
import androidx.compose.material.icons.filled.Shuffle
import androidx.compose.material.icons.filled.ShuffleOn
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.linguadailyapp.R
import com.example.linguadailyapp.navigation.NavigationDestinations
import com.example.linguadailyapp.ui.theme.LinguaDailyAppTheme
import com.example.linguadailyapp.ui.theme.Playfair

@Preview(showBackground = true)
@Composable
fun MainWordCardPreview() {
    LinguaDailyAppTheme {
//        Column {

//            TwoCardsInRow()
//            Spacer(modifier = Modifier.height(16.dp))
        val navController = rememberNavController() // This would normally be used inside the NavHost

            MainWordCard(navController = navController)
//        }
    }
}

@Composable
fun MainWordCard( navController: NavController) {

    val pageCount = 3
    val pagerState = rememberPagerState(pageCount = {pageCount})

    Card(
        border = BorderStroke(1.dp, MaterialTheme.colorScheme.onBackground),
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 24.dp)
            .height(370.dp)
            .heightIn(min)
        , //480 - 370




        elevation = CardDefaults.cardElevation(
            defaultElevation = 2.dp
        ),
        shape = MaterialTheme.shapes.medium,
          colors = CardDefaults.cardColors(
        containerColor = MaterialTheme.colorScheme.primary,
    ),
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp, bottom = 10.dp) // Set individual padding values

        ) {
            // Word and part of speech, Top section
            Text(
                text = "minatory",
                fontSize = 32.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = Playfair,
                color = Color.Black
            )

            Text(
                text = "adjective - MIN-uh-tor-ee",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(top = 4.dp, bottom = 24.dp),
                fontFamily = FontFamily.Default,
                fontWeight = FontWeight.SemiBold,

            )

            // Divider
//            HorizontalDivider(
//                modifier = Modifier.fillMaxWidth(),
//                thickness = 2.dp,
//                color = Color(0xFFF7E5BE),
//            )


            // How to use section - Middle section
            Box(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .drawBehind {
                        val strokeWidth = 2.dp.toPx()
                        val horizontalPadding = 20.dp.toPx() // Adjust this to match your card's padding

                        // Top line that extends beyond the box boundaries
                        drawLine(
                            color = Color(0xFFF7E5BE),
                            start = Offset(-horizontalPadding, 0f),
                            end = Offset(size.width + horizontalPadding, 0f),
                            strokeWidth = strokeWidth
                        )


                    }
            ) {
                HorizontalPager(
                    state = pagerState,
                    modifier = Modifier.fillMaxSize()
                ) { page ->
                    when (page) {
                        0 -> {
                            // Page 1: How to use
                            Column(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .padding(vertical = 8.dp)
                            ) {
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 8.dp),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = "How to use minatory",
                                        fontSize = 18.sp,
                                        fontWeight = FontWeight.Bold,
                                        fontFamily = FontFamily.Default,

                                        color = Color.Black
                                    )

                                    Box  (modifier = Modifier.padding(horizontal = 10.dp)) {
                                        IconButton(
                                            onClick = { /* Add functionality */ },
                                            modifier = Modifier
                                                .background(
                                                    color = Color(0xFF1F565E),
                                                    shape = CircleShape
                                                )
                                                .size(32.dp)
                                                .padding(horizontal = 0.dp)
                                        ) {
                                            Icon(
                                                imageVector = Icons.Default.BookmarkAdd,
                                                contentDescription = "Add",
                                                tint = Color.White,
                                                modifier = Modifier.size(18.dp)
                                            )
                                        }
                                    }
//                                    Spacer(modifier = Modifier.width(0.dp))
                                }

//                                Text(
//                                    text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod,Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod,Lorem ipsum dolor sit amet, consectetur adip",
//                                fontSize = 16.sp,
//                                color = Color.Black,
//                                lineHeight = 24.sp,
//                                    maxLines = Int.MAX_VALUE,
//                                    overflow = TextOverflow.Visible
//                                )
                                Box(
                                    modifier = Modifier
                                        .height(200.dp)
                                        .verticalScroll(rememberScrollState())
                                ) {
                                    Text(
                                        text = "Lorem ipsum dolor sit amet... \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod,Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod,Lorem ipsum dolor sit amet, consectetur adip",
                                        fontSize = 16.sp,
                                        color = Color.Black,
                                        lineHeight = 24.sp
                                    )
                                }
                            }
                        }
                        1 -> {
                            // Page 2: Definition
                            Column(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .padding(vertical = 8.dp)
                            ) {
                                Text(
                                    text = "Definition",
                                    fontSize = 18.sp,
                                    fontWeight = FontWeight.Medium,
                                    color = Color.Black,
                                    modifier = Modifier.padding(vertical = 8.dp, horizontal = 0.dp)
                                )

                                Text(
                                    text = "Threatening or menacing: expressing or conveying a threat.",
                                    fontSize = 16.sp,
                                    color = Color.Black,
                                    lineHeight = 24.sp
                                )
                            }
                        }
                        2 -> {
                            // Page 3: Etymology
                            Column(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .padding(vertical = 8.dp)
                            ) {
                                Text(
                                    text = "Etymology",
                                    fontSize = 18.sp,
                                    fontWeight = FontWeight.Medium,
                                    color = Color.Black,
                                    modifier = Modifier.padding(vertical = 8.dp)
                                )

                                Text(
                                    text = "From Latin minātōrius, from minātus, perfect participle of minārī to punch).",
                                    fontSize = 16.sp,
                                    color = Color.Black,
                                    lineHeight = 24.sp
                                )
                            }
                        }
                    }
                }
            }

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .drawBehind {
                        val strokeWidth = 2.dp.toPx()
                        val horizontalPadding = 24.dp.toPx()

                        // Draw line at the top of this box (above the dots)
                        drawLine(
                            color = Color(0xFFF7E5BE),
                            start = Offset(-horizontalPadding, size.height),
                            end = Offset(size.width + horizontalPadding, size.height),
                            strokeWidth = strokeWidth)

                    }
            ) {
                // Row with dots
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 8.dp,bottom = 16.dp),
                    horizontalArrangement = Arrangement.Center
                ) {
                    repeat(pageCount) { index ->
                        Box(
                            modifier = Modifier
                                .padding(horizontal = 4.dp)
                                .size(8.dp)
                                .background(
                                    color = if (pagerState.currentPage == index) Color(0xFF1F565E) else Color(0xFFD9D9D9),
                                    shape = CircleShape
                                )
                        )
                    }
                }
            }
            // Pagination dots - shows current page



            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 16.dp),


                horizontalArrangement = Arrangement.SpaceBetween
            ) {
//                Circle(Icons.Default.Lightbulb, Color(0xFFBBDEFB), "Words") { navController.navigate(NavigationDestinations.WordsList.route) }
//            Circle(Icons.Default.Bookmarks, Color(0xFFFFAB91), "Bookmarks") { navController.navigate(NavigationDestinations.Bookmark.route)}
//            Circle(Icons.Default.Shuffle,

                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.clickable(onClick = { navController.navigate(
                        NavigationDestinations.WordsList.route) })
                ) {
                    Icon(
                        imageVector = Icons.Default.Lightbulb,
                        contentDescription = "Words",
                        tint = Color(0xFF1F565E),
                        modifier = Modifier.size(24.dp)
                    )
                    Text(
                        text = "Words",
                        fontFamily = FontFamily.Default,
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,

                        color = Color(0xFF1F565E)
                    )
                }

                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                            modifier = Modifier.clickable(onClick = { navController.navigate(
                        NavigationDestinations.Bookmark.route) })
                ) {
                    Icon(
                        imageVector = Icons.Default.Bookmarks,
                        contentDescription = "Bookmarks",
                        tint = Color(0xFF1F565E),
                        modifier = Modifier.size(24.dp)
                    )
                    Text(
                        text = "Bookmarks",
                        fontFamily = FontFamily.Default,

                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,

                        color = Color(0xFF1F565E)
                    )
                }

                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.clickable(onClick = { navController.navigate(
                        NavigationDestinations.WordsList.route) })
                ) {
                    Icon(
                        imageVector = Icons.Default.Shuffle,
                        contentDescription = "Random",
                        tint = Color(0xFF1F565E),
                        modifier = Modifier.size(24.dp)
                    )
                    Text(
                        text = "Random",
                        fontFamily = FontFamily.Default,

                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF1F565E)
                    )
                }
            }
        }
    }
}
